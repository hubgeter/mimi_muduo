{
    "cquery.cacheDirectory": "${workspaceFolder}/.vscode/cquery_cached_index/",
    "files.associations": {
        "*.cpp": "cpp",
        "*.php": "php",
        "timestamp": "cpp",
        "*.tcc": "cpp",
        "algorithm": "cpp",
        "tuple": "cpp",
        "atomic": "cpp",
        "cctype": "cpp",
        "clocale": "cpp",
        "cmath": "cpp",
        "cstdarg": "cpp",
        "cstddef": "cpp",
        "cstdio": "cpp",
        "cstdlib": "cpp",
        "ctime": "cpp",
        "cwchar": "cpp",
        "cwctype": "cpp",
        "array": "cpp",
        "bit": "cpp",
        "chrono": "cpp",
        "condition_variable": "cpp",
        "cstdint": "cpp",
        "deque": "cpp",
        "map": "cpp",
        "unordered_map": "cpp",
        "vector": "cpp",
        "exception": "cpp",
        "functional": "cpp",
        "iterator": "cpp",
        "memory": "cpp",
        "memory_resource": "cpp",
        "numeric": "cpp",
        "optional": "cpp",
        "random": "cpp",
        "ratio": "cpp",
        "string": "cpp",
        "string_view": "cpp",
        "system_error": "cpp",
        "type_traits": "cpp",
        "utility": "cpp",
        "fstream": "cpp",
        "initializer_list": "cpp",
        "iosfwd": "cpp",
        "iostream": "cpp",
        "istream": "cpp",
        "limits": "cpp",
        "mutex": "cpp",
        "new": "cpp",
        "ostream": "cpp",
        "sstream": "cpp",
        "stdexcept": "cpp",
        "streambuf": "cpp",
        "thread": "cpp",
        "typeinfo": "cpp",
        "cstring": "cpp",
        "bitset": "cpp",
        "complex": "cpp",
        "list": "cpp",
        "set": "cpp",
        "cinttypes": "cpp",
        "typeindex": "cpp",
        "variant": "cpp",
        "csetjmp": "cpp",
        "csignal": "cpp",
        "any": "cpp",
        "cfenv": "cpp",
        "charconv": "cpp",
        "codecvt": "cpp",
        "cuchar": "cpp",
        "forward_list": "cpp",
        "unordered_set": "cpp",
        "regex": "cpp",
        "future": "cpp",
        "iomanip": "cpp",
        "scoped_allocator": "cpp",
        "shared_mutex": "cpp",
        "valarray": "cpp"
    },
    // 开启粘贴保存自动格式化
    "editor.formatOnPaste": true,
    "editor.formatOnSave": true,
    "editor.formatOnType": true,
    "C_Cpp.errorSquiggles": "enabled",
    "C_Cpp.intelliSenseEngineFallback": "enabled",
    "C_Cpp.intelliSenseEngine": "default",
    "C_Cpp.autocomplete": "default", // So you don't get autocomplete from both extensions.
    "clangd.path": "/usr/bin/clangd",
    // Clangd 运行参数(在终端/命令行输入 clangd --help-list-hidden 可查看更多)
    "clangd.arguments": [
        // 让 Clangd 生成更详细的日志
        "--log=verbose",
        // 输出的 JSON 文件更美观
        "--pretty",
        // 全局补全(输入时弹出的建议将会提供 CMakeLists.txt 里配置的所有文件中可能的符号，会自动补充头文件)
        "--all-scopes-completion",
        // 建议风格：打包(重载函数只会给出一个建议）
        // 相反可以设置为detailed
        "--completion-style=bundled",
        // 跨文件重命名变量
        "--cross-file-rename",
        // 允许补充头文件
        "--header-insertion=iwyu",
        // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
        "--header-insertion-decorators",
        // 在后台自动分析文件(基于 complie_commands，我们用CMake生成)
        "--background-index",
        // 启用 Clang-Tidy 以提供「静态检查」
        "--clang-tidy",
        // Clang-Tidy 静态检查的参数，指出按照哪些规则进行静态检查，详情见「与按照官方文档配置好的 VSCode 相比拥有的优势」
        // 参数后部分的*表示通配符
        // 在参数前加入-，如-modernize-use-trailing-return-type，将会禁用某一规则
        "--clang-tidy-checks=cppcoreguidelines-*,performance-*,bugprone-*,portability-*,modernize-*,google-*",
        // 默认格式化风格: 谷歌开源项目代码指南
        // "--fallback-style=file",
        // 同时开启的任务数量
        "-j=2",
        // pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能) 推荐在板子上使用disk
        "--pch-storage=disk",
        // 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
        // 我选择禁用
        "--function-arg-placeholders=false",
        // compelie_commands.json 文件的目录位置(相对于工作区，由于 CMake 生成的该文件默认在 build 文件夹中，故设置为 build)
        "--compile-commands-dir=build"
    ],
    "clang-format.fallbackStyle": "Visual Studio",
}